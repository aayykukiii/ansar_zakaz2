from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from database import crud
from states.client_states import OrderState

router = Router()

@router.callback_query(F.data.startswith("cat:"))
async def on_category(call: CallbackQuery):
    category_name = call.data.split(":", 1)[1]

    rus_tr_categories = {"üõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å", "üõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å", "üõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏"}
    kitchen_categories = {"üç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å"}

    if category_name in rus_tr_categories:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–†–æ—Å—Å–∏–π—Å–∫–∞—è", callback_data=f"sub:{category_name}:–†–æ—Å—Å–∏–π—Å–∫–∞—è")],
            [InlineKeyboardButton(text="–¢—É—Ä–µ—Ü–∫–∞—è", callback_data=f"sub:{category_name}:–¢—É—Ä–µ—Ü–∫–∞—è")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:menu")]
        ])
        await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        await call.answer()
        return

    if category_name in kitchen_categories:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìê –ü—Ä—è–º–∞—è", callback_data=f"sub:{category_name}:–ü—Ä—è–º–∞—è")],
            [InlineKeyboardButton(text="üîΩ –£–≥–ª–æ–≤–∞—è", callback_data=f"sub:{category_name}:–£–≥–ª–æ–≤–∞—è")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:menu")]
        ])
        await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ö–Ω–∏:", reply_markup=kb)
        await call.answer()
        return


    products = await crud.list_products_by_category_name(category_name)
    if not products:
        await call.message.answer("–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
        await call.answer()
        return
    

    for p in products:
        text = f"<b>{p.name}</b>\n{p.description or ''}\n–°—Ç—Ä–∞–Ω–∞: {p.country or '-'}\n–†–∞–∑–º–µ—Ä—ã: {p.size or '-'}\n–¶–µ–Ω–∞: {p.price or '-'}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask:{p.id}"),
             InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order:{p.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:menu")]
        ])
        if p.photo:
            await call.message.answer_photo(photo=p.photo, caption=text, parse_mode="HTML", reply_markup=kb)
        else:
            await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()
    

@router.callback_query(F.data == "about:info")
async def about_info_handler(call: CallbackQuery):
    await call.message.answer(
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üè¢ –ö–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–µ–±–µ–ª–∏\n"
        "üìç –ì—Ä–æ–∑–Ω—ã–π, —É–ª. –ú–µ–±–µ–ª—å–Ω–∞—è, 10\n"
        "üì± +7 (995) 800-89-95"
    )
    await call.answer()


@router.callback_query(F.data.startswith("sub:"))
async def on_subcategory(call: CallbackQuery):
    _, category_name, subcategory = call.data.split(":", 2)
    products = await crud.list_products_by_category_and_subcat(category_name, subcategory)

    if not products:
        await call.message.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–¥–≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await call.answer()
        return

    for p in products:
        text = f"<b>{p.name}</b>\n{p.description or ''}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {p.subcategory or '-'}\n–°—Ç—Ä–∞–Ω–∞: {p.country or '-'}\n–†–∞–∑–º–µ—Ä—ã: {p.size or '-'}\n–¶–µ–Ω–∞: {p.price or '-'}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"ask:{p.id}"),
             InlineKeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order:{p.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:menu")]
        ])
        if p.photo:
            await call.message.answer_photo(photo=p.photo, caption=text, parse_mode="HTML", reply_markup=kb)
        else:
            await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "back:menu")
async def back_to_menu(call: CallbackQuery):
    from .user_commands import start_cmd
    await start_cmd(call.message)
    await call.answer()


@router.callback_query(F.data.startswith("order:"))
async def order_start(call: CallbackQuery, state: FSMContext):
    _, pid = call.data.split(":")
    await state.update_data(product_id=int(pid))
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_name)
    await call.answer()


@router.message(OrderState.waiting_name)
async def order_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä–∏–º–µ—Ä +79161234567):")
    await state.set_state(OrderState.waiting_phone)


@router.message(OrderState.waiting_phone)
async def order_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    data = await state.get_data()
    prod = await crud.get_product_by_id(data["product_id"])
    await crud.add_order(
        customer_name=data["name"],
        customer_phone=phone,
        product_id=prod.id if prod else None,
        product_name=prod.name if prod else None
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()
