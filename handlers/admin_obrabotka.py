from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID
from database import crud
from states.admin_states import AddCategoryState, AddProductState, DeleteProductState

router = Router()


@router.callback_query(F.data.startswith("adm:"))
async def admin_menu_actions(call: CallbackQuery, state: FSMContext):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    action = call.data.split(":", 1)[1]

    def admin_kb():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="adm:add_category")],
            [InlineKeyboardButton(text="2. –î–æ–±–∞–≤–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:add_product")],
            [InlineKeyboardButton(text="3. –£–¥–∞–ª–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:delete_product")],
            [InlineKeyboardButton(text="4. –ó–∞—è–≤–∫–∏", callback_data="adm:orders")],
            [InlineKeyboardButton(text="5. –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="adm:list_categories")],
        ])

    if action == "add_category":
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adm:cancel")]])
        await call.message.answer(
            "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–±–µ–ª–∏\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\nüîπ –°–æ–≤–µ—Ç: –¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—é –∑–∞–º–µ—Ç–Ω–µ–µ.\n–ü—Ä–∏–º–µ—Ä—ã:\nüõèÔ∏è –°–ø–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å\nüç≥ –ö—É—Ö–æ–Ω–Ω–∞—è –º–µ–±–µ–ª—å\nüõãÔ∏è –ú—è–≥–∫–∞—è –º–µ–±–µ–ª—å\nüìö –°—Ç–æ–ª—ã –∏ —Å—Ç—É–ª—å—è\nüì∫ –¢—É–º–±—ã –∏ –∫–æ–º–æ–¥—ã\nüõèÔ∏è –ö—Ä–æ–≤–∞—Ç–∏\nüõèÔ∏èÔ∏è –ú–∞—Ç—Ä–∞—Å—ã\nüö™ –®–∫–∞—Ñ—ã\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
            reply_markup=kb
        )
        await state.set_state(AddCategoryState.waiting_name)
        await call.answer()
        return

    if action == "add_product":
        await call.message.answer(
            "ü™Ñ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ–±–µ–ª–∏\n\nüìù –®–∞–≥ 1 –∏–∑ 6: –û–ø–∏—Å–∞–Ω–∏–µ –º–µ–±–µ–ª–∏\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ–±–µ–ª–∏:\n‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Ç–¥–µ–ª–∫–∞\n‚Ä¢ –ì–∞–±–∞—Ä–∏—Ç—ã (–î√ó–®√ó–í)\n‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n‚Ä¢ –°—Ç–∏–ª—å –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä:\n–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∫–æ–∂–∞–Ω—ã–π –¥–∏–≤–∞–Ω \"–ö–æ–º—Ñ–æ—Ä—Ç\" —Å –º—è–≥–∫–∏–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º,\n—Ä–∞–∑–º–µ—Ä—ã 200√ó90√ó85 —Å–º, –∫–∞—Ä–∫–∞—Å –∏–∑ –±–µ—Ä–µ–∑–æ–≤–æ–π —Ñ–∞–Ω–µ—Ä—ã,\n–ø–æ–¥—É—à–∫–∏ —Å–∏–¥–µ–Ω—å—è –Ω–∞ –ø—Ä—É–∂–∏–Ω–Ω–æ–º –±–ª–æ–∫–µ, —Ü–≤–µ—Ç —á–µ—Ä–Ω—ã–π.",
            reply_markup=None
        )
        await state.set_state(AddProductState.step1_description)
        await call.answer()
        return

    if action == "delete_product":
        products = await crud.list_products()
        if not products:
            await call.message.answer("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            await call.answer()
            return
        text = "–°–ø–∏—Å–æ–∫ –º–µ–±–µ–ª–∏ (id ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ):\n\n"
        for p in products:
            text += f"{p.id} ‚Äî {p.name}\n"
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ id –º–µ–±–µ–ª–∏ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ id)."
        await call.message.answer(text)
        await state.set_state(DeleteProductState.waiting_id)
        await call.answer()
        return

    if action == "orders":
        orders = await crud.list_orders()
        if not orders:
            await call.message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            await call.answer()
            return
        for o in orders:
            txt = f"#{o.id}\n–ö–ª–∏–µ–Ω—Ç: {o.customer_name}\n–¢–µ–ª: {o.customer_phone}\n–¢–æ–≤–∞—Ä: {o.product_name or '-'}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {o.comment or '-'}\n–°—Ç–∞—Ç—É—Å: {o.status}"
            await call.message.answer(txt)
        await call.answer()
        return

    if action == "list_categories":
        cats = await crud.list_categories()
        if not cats:
            await call.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            await call.answer()
            return
        txt = "–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        for c in cats:
            txt += f"{c.id} ‚Äî {c.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {c.description or '-'}\n\n"
        await call.message.answer(txt)
        await call.answer()
        return

    if action == "cancel":
        await call.message.answer(text="–û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_kb())
        await state.clear()
        await call.answer()
        return



@router.message(AddCategoryState.waiting_name)
async def cat_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="adm:cancel")]])
    await msg.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {msg.text.strip()}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –æ–¥–Ω–æ-–¥–≤–µ —Ñ—Ä–∞–∑—ã.\n–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
        reply_markup=kb
    )
    await state.set_state(AddCategoryState.waiting_description)


@router.message(AddCategoryState.waiting_description)
async def cat_desc(msg: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    description = msg.text.strip()
    await crud.add_category(name=name, description=description)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="adm:add_category")],
        [InlineKeyboardButton(text="2. –î–æ–±–∞–≤–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:add_product")],
        [InlineKeyboardButton(text="3. –£–¥–∞–ª–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:delete_product")],
        [InlineKeyboardButton(text="4. –ó–∞—è–≤–∫–∏", callback_data="adm:orders")],
        [InlineKeyboardButton(text="5. –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="adm:list_categories")],
    ])
    await msg.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ\n{name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}", reply_markup=kb)
    await state.clear()


@router.message(AddProductState.step1_description)
async def p_step1(msg: Message, state: FSMContext):
    await state.update_data(description=msg.text.strip())
    await msg.answer("–®–∞–≥ 2 –∏–∑ 6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–±–µ–ª–∏ (–ø—Ä–∏–º–µ—Ä: –î–∏–≤–∞–Ω –ö–æ–º—Ñ–æ—Ä—Ç):")
    await state.set_state(AddProductState.step2_name)


@router.message(AddProductState.step2_name)
async def p_step2(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    cats = await crud.list_categories()
    if not cats:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=c.name, callback_data=f"choose_cat:{c.id}")] for c in cats])
    await msg.answer("–®–∞–≥ 3 –∏–∑ 6: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)


@router.callback_query(F.data.startswith("choose_cat:"))
async def choose_cat(call: CallbackQuery, state: FSMContext):
    cat_id = int(call.data.split(":")[1])
    await state.update_data(category_id=cat_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∞—è", callback_data="choose_subcat:–†–æ—Å—Å–∏–π—Å–∫–∞—è")],
        [InlineKeyboardButton(text="üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è", callback_data="choose_subcat:–¢—É—Ä–µ—Ü–∫–∞—è")]
    ])
    await call.message.answer("–®–∞–≥ 4 –∏–∑ 6: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–ª–∏ –¢—É—Ä–µ—Ü–∫–∞—è):", reply_markup=kb)
    await state.set_state(AddProductState.step3_subcategory)
    await call.answer()


@router.callback_query(F.data.startswith("choose_subcat:"))
async def choose_subcat(call: CallbackQuery, state: FSMContext):
    sub = call.data.split(":", 1)[1]
    await state.update_data(subcategory=sub)
    await call.message.answer("–®–∞–≥ 5 –∏–∑ 6: –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã (–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è; 200x160):")
    await state.set_state(AddProductState.step4_country_size)
    await call.answer()


@router.message(AddProductState.step4_country_size)
async def p_step4(msg: Message, state: FSMContext):
    await state.update_data(country_size=msg.text.strip())
    await msg.answer("–®–∞–≥ 6 –∏–∑ 6: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ '–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è'):")
    await state.set_state(AddProductState.step5_price)


@router.message(AddProductState.step5_price)
async def p_step5(msg: Message, state: FSMContext):
    await state.update_data(price=msg.text.strip())
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–æ–¥–Ω–æ). –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.set_state(AddProductState.step6_photo)


@router.message(AddProductState.step6_photo, F.photo)
async def p_step6(msg: Message, state: FSMContext):
    data = await state.get_data()
    file_id = msg.photo[-1].file_id
    cs = data.get("country_size", "")
    country, size = (cs.split(";")[0].strip(), cs.split(";")[1].strip()) if ";" in cs else (cs.strip(), None)
    await crud.add_product(
        name=data.get("name"),
        category_id=data.get("category_id"),
        subcategory=data.get("subcategory"),
        country=country,
        size=size,
        price=data.get("price"),
        description=data.get("description"),
        photo=file_id
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="adm:add_category")],
        [InlineKeyboardButton(text="2. –î–æ–±–∞–≤–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:add_product")],
        [InlineKeyboardButton(text="3. –£–¥–∞–ª–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:delete_product")],
        [InlineKeyboardButton(text="4. –ó–∞—è–≤–∫–∏", callback_data="adm:orders")],
        [InlineKeyboardButton(text="5. –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="adm:list_categories")],
    ])
    await msg.answer("‚úÖ –ú–µ–±–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await state.clear()


@router.message(DeleteProductState.waiting_id)
async def delete_by_id(msg: Message, state: FSMContext):
    text = msg.text.strip()
    if not text.isdigit():
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ ‚Äî id —Ç–æ–≤–∞—Ä–∞.")
        return
    pid = int(text)
    p = await crud.get_product_by_id(pid)
    if not p:
        await msg.answer("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π id –∏–ª–∏ /cancel")
        return
    await crud.delete_product_by_id(pid)
    products = await crud.list_products()
    txt = "–ú–µ–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n" if not products else "–ú–µ–±–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n\n"
    for it in products:
        txt += f"{it.id} ‚Äî {it.name}\n"
    await msg.answer(txt)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="adm:add_category")],
        [InlineKeyboardButton(text="2. –î–æ–±–∞–≤–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:add_product")],
        [InlineKeyboardButton(text="3. –£–¥–∞–ª–∏—Ç—å –º–µ–±–µ–ª—å", callback_data="adm:delete_product")],
        [InlineKeyboardButton(text="4. –ó–∞—è–≤–∫–∏", callback_data="adm:orders")],
        [InlineKeyboardButton(text="5. –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="adm:list_categories")],
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await state.clear()